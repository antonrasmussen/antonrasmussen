# Even Fibonacci Numbers


'''

Each new term in the Fibonacci sequence is generated by adding the previous 
two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not 
exceed four million, find the sum of the even-valued terms.


# Some peeps use inputs to create their sequences:

#getFirstNumb = int(raw_input("The first number: "))

#getLastNumb = int(raw_input("The last number: "))


## The following is recursive and SLOW . . .  see below for memoization
def fib(n):
   if n == 0:
       return 0
   elif n == 1:
       return 1
   else:
       return fib(n-1) + fib(n-2)



## Memoization (crashes at 10000)

memo = {0:0, 1:1}

def fib(n):
    if not n in memo:
        memo[n] = fib(n-1) + fib(n-2)
    return memo[n]
    
'''

## Iteration (Really slow at 100000)


def main():
   def fib(max):
      a, b = 1, 2
      while a < max:
         yield a
         a, b = b, a + b
   result = 0
   for n in fib(10000000):
      if n%2 == 0:
         result += n
   print result

main()


'''

## Generator (takes awhile)

def fib():
    a, b = 0, 1
    while 1:
        yield a
        a, b = b, a + b
        
## in the terminal:
%run C:/Python27/Euler2.py

>>> a = fib()

>>> a.next()

Out[3]: 0

>>> for i in range(10):
 ...print a.next(),
    
1 1 2 3 5 8 13 21 34 55

>>> for i in range(10000):
 ...print a.next(),

'''
